import numpy as np
from matplotlib import widgets
import onnx, onnx.numpy_helper
model = onnx.load("mnist-12.onnx")

weights = model.graph.initializer

input = np.array([-0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.029637714847922325, 0.7467845678329468,
    1.7777715921401978, 2.796030282974243, 1.5104787349700928,
    1.5104787349700928, 0.36493754386901855, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, 0.09764464199542999, 2.5414655208587646,
    2.783302068710327, 2.796030282974243, 2.783302068710327,
    2.796030282974243, 2.783302068710327, 2.4141831398010254,
    0.6067740321159363, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, 0.4922199249267578, 2.5414655208587646,
    2.808758497238159, 1.7650433778762817, -0.4242129623889923,
    -0.4242129623889923, 2.0323362350463867, 2.796030282974243,
    2.808758497238159, 2.2869009971618652, -0.15692004561424255,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, 0.09764464199542999, 2.796030282974243,
    2.783302068710327, 1.2431857585906982, -0.2969306409358978,
    -0.4242129623889923, -0.4242129623889923, 0.4794916808605194,
    2.783302068710327, 2.796030282974243, 2.783302068710327,
    1.3831963539123535, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.2842023968696594, 1.7777715921401978,
    2.808758497238159, 2.5414655208587646, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    0.09764464199542999, 2.668747901916504, 2.808758497238159,
    2.796030282974243, 2.808758497238159, 1.7650433778762817,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, 0.22492696344852448,
    2.783302068710327, 2.796030282974243, 0.466763436794281,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, 2.159618616104126,
    1.4977505207061768, 2.5287373065948486, 2.796030282974243,
    2.783302068710327, 0.6195022463798523, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    1.5104787349700928, 2.796030282974243, 2.68147611618042,
    0.08491640537977219, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    0.09764464199542999, -0.4242129623889923, 0.6195022463798523,
    2.5541937351226807, 2.796030282974243, 2.5541937351226807,
    -0.042365945875644684, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    0.09764464199542999, 2.5414655208587646, 2.783302068710327,
    1.6377609968185425, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, 1.0013492107391357, 2.783302068710327,
    2.796030282974243, 1.7650433778762817, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, 0.8740668296813965, 2.808758497238159,
    2.796030282974243, 0.6195022463798523, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.15692004561424255,
    2.4141831398010254, 2.808758497238159, 2.796030282974243,
    0.36493754386901855, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, 1.3831963539123535,
    2.796030282974243, 2.783302068710327, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, 1.1286314725875854, 2.796030282974243,
    2.783302068710327, 0.8740668296813965, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.029637714847922325,
    2.5414655208587646, 2.808758497238159, 2.796030282974243,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    2.808758497238159, 2.796030282974243, 2.159618616104126,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    0.22492696344852448, 2.783302068710327, 2.796030282974243,
    2.783302068710327, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, 2.796030282974243, 2.783302068710327,
    2.159618616104126, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, 0.22492696344852448, 2.796030282974243,
    2.808758497238159, 2.796030282974243, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.15692004561424255, 2.808758497238159,
    2.796030282974243, 1.3831963539123535, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, 0.22492696344852448,
    2.783302068710327, 2.796030282974243, 2.783302068710327,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, 0.8740668296813965,
    2.796030282974243, 2.783302068710327, 0.8740668296813965,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, 1.905053973197937, 2.808758497238159,
    2.796030282974243, 1.6504892110824585, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.029637714847922325,
    2.5414655208587646, 2.808758497238159, 2.5414655208587646,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, 0.8740668296813965,
    2.796030282974243, 2.783302068710327, 2.668747901916504,
    0.08491640537977219, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    1.2559140920639038, 2.783302068710327, 2.796030282974243,
    0.466763436794281, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, 1.7777715921401978, 2.796030282974243,
    2.821486711502075, 2.796030282974243, 0.6195022463798523,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    0.6195022463798523, 2.808758497238159, 2.796030282974243,
    1.1413596868515015, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.2969306409358978,
    1.7650433778762817, 2.796030282974243, 2.783302068710327,
    2.668747901916504, 1.6377609968185425, 0.09764464199542999,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    1.6504892110824585, 2.668747901916504, 2.796030282974243,
    2.274172782897949, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, 1.1413596868515015,
    2.668747901916504, 2.808758497238159, 2.796030282974243,
    2.5541937351226807, 1.5104787349700928, 1.5232069492340088,
    2.5414655208587646, 2.808758497238159, 2.5414655208587646,
    1.1413596868515015, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, 0.08491640537977219, 1.4977505207061768,
    2.5287373065948486, 2.796030282974243, 2.783302068710327,
    2.796030282974243, 2.783302068710327, 1.4977505207061768,
    0.21219873428344727, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923, -0.4242129623889923,
    -0.4242129623889923, -0.4242129623889923], np.dtype(np.float32)).reshape(1,1,28,28)



f = open("mnist-mlir-runner.mlir", 'w')


f.write("""func.func private @printMemrefF32(memref<*xf32>)
#map0 = affine_map<(d0, d1) -> (d0 * 8 + d1)>
#map1 = affine_map<(d0) -> (-d0 + 2, 0)>
#map2 = affine_map<(d0) -> (-d0 + 30, 5)>
#map3 = affine_map<(d0, d1) -> (-d1 + 2, 0)>
#map4 = affine_map<(d0, d1) -> (-d1 + 30, 5)>
#map5 = affine_map<(d0)[s0] -> (d0 + s0)>
#map6 = affine_map<(d0, d1) -> (d0 + d1 - 2)>
#map7 = affine_map<(d0) -> (0, d0 * 2)>
#map8 = affine_map<(d0)[s0, s1, s2, s3, s4] -> (s0 - ((s2 ceildiv s4) * s4 - s2), -(d0 * s3 - s2) + s0, d0 * s3 + (s1 - 1) * s4 - s2 - ((s2 ceildiv s4) * s4 - s2) + 1, d0 * s3 + (s1 - 1) * s4 - s2 - (d0 * s3 - s2) + 1)>
#map9 = affine_map<(d0, d1) -> (d0 * 16 + d1)>
#map10 = affine_map<(d0) -> (-d0 + 16, 5)>
#map11 = affine_map<(d0, d1) -> (-d1 + 16, 5)>
#map12 = affine_map<(d0, d1) -> (d0 + d1 * 8)>
#map13 = affine_map<(d0) -> (0, d0 * 3)>
func.func @entry() {
    %arg0 = memref.alloc(): memref<1x1x28x28xf32>


    %c3 = arith.constant 3 : index
    %cst = arith.constant 0xFF800000 : f32
    %c14 = arith.constant 14 : index
    %cst_0 = arith.constant 0.000000e+00 : f32
    %c2 = arith.constant 2 : index
    %c28 = arith.constant 28 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %0 = memref.alloc() : memref<8x1x5x5xf32>
""")

conv28 = [w for w in weights if w.name == 'Parameter5'][0]
conv28_weights = onnx.numpy_helper.to_array(conv28)
# print(onnx.numpy_helper.to_array(conv28).shape)

for a in range(8):
    for b in range(1):
        for c in range(5):
            for d in range(5):
                f.write(f"    %conv28_{a}{b}{c}{d}_a = arith.constant {a} : index\n")
                f.write(f"    %conv28_{a}{b}{c}{d}_b = arith.constant {b} : index\n")
                f.write(f"    %conv28_{a}{b}{c}{d}_c = arith.constant {c} : index\n")
                f.write(f"    %conv28_{a}{b}{c}{d}_d = arith.constant {d} : index\n")
                f.write(f"    %conv28_{a}{b}{c}{d}_v = arith.constant {conv28_weights[a, b, c,d]} : f32\n")
                f.write(f"    memref.store %conv28_{a}{b}{c}{d}_v, %0[%conv28_{a}{b}{c}{d}_a, %conv28_{a}{b}{c}{d}_b, %conv28_{a}{b}{c}{d}_c, %conv28_{a}{b}{c}{d}_d] : memref<8x1x5x5xf32> \n")



for a in range(1):
    for b in range(1):
        for c in range(28):
            for d in range(28):
                f.write(f"    %arg_{a}_{b}_{c}_{d}_a = arith.constant {a} : index\n")
                f.write(f"    %arg_{a}_{b}_{c}_{d}_b = arith.constant {b} : index\n")
                f.write(f"    %arg_{a}_{b}_{c}_{d}_c = arith.constant {c} : index\n")
                f.write(f"    %arg_{a}_{b}_{c}_{d}_d = arith.constant {d} : index\n")
                f.write(f"    %arg_{a}_{b}_{c}_{d}_v = arith.constant {input[a, b, c, d]} : f32\n")
                f.write(f"    memref.store %arg_{a}_{b}_{c}_{d}_v, %arg0[%arg_{a}_{b}_{c}_{d}_a, %arg_{a}_{b}_{c}_{d}_b, %arg_{a}_{b}_{c}_{d}_c, %arg_{a}_{b}_{c}_{d}_d] : memref<1x1x28x28xf32> \n")



f.write("    %1 = memref.alloc() : memref<8xf32>\n")
p6 = [w for w in weights if w.name == 'Parameter6'][0]
p6_weights = onnx.numpy_helper.to_array(p6).flatten()
print(p6_weights)
for a in range(8):
    f.write(f"    %p6_{a} = arith.constant {a} : index\n")
    f.write(f"    %p6_{a}_v = arith.constant {p6_weights[a]} : f32\n")
    f.write(f"    memref.store %p6_{a}_v, %1[%p6_{a}] : memref<8xf32> \n")

f.write("""%2 = memref.alloc() {alignment = 16 : i64} : memref<1x8x28x28xf32>
    %3 = memref.alloc() : memref<f32>
    affine.for %arg1 = 0 to 1 {
      affine.for %arg2 = 0 to 1 {
        affine.for %arg3 = 0 to 8 {
          %20 = affine.apply #map0(%arg2, %arg3)
          affine.for %arg4 = 0 to 28 {
            affine.for %arg5 = 0 to 28 {
              affine.store %cst_0, %3[] : memref<f32>
              affine.for %arg6 = 0 to 1 {
                affine.for %arg7 = max #map1(%arg4) to min #map2(%arg4) {
                  affine.for %arg8 = max #map3(%arg4, %arg5) to min #map4(%arg4, %arg5) {
                    %24 = affine.apply #map5(%arg6)[%arg2]
                    %25 = affine.apply #map6(%arg7, %arg4)
                    %26 = affine.apply #map6(%arg8, %arg5)
                    %27 = affine.load %arg0[%arg1, %24, %25, %26] : memref<1x1x28x28xf32>
                    %28 = affine.load %0[%20, %arg6, %arg7, %arg8] : memref<8x1x5x5xf32>
                    %29 = affine.load %3[] : memref<f32>
                    %30 = arith.mulf %27, %28 : f32
                    %31 = arith.addf %29, %30 : f32
                    affine.store %31, %3[] : memref<f32>
                  }
                }
              }
              %21 = affine.load %3[] : memref<f32>
              %22 = affine.load %1[%20] : memref<8xf32>
              %23 = arith.addf %21, %22 : f32
              affine.store %23, %2[%arg1, %20, %arg4, %arg5] : memref<1x8x28x28xf32>
            }
          }
        }
      }
    }
    %4 = memref.alloc() {alignment = 16 : i64} : memref<1x8x28x28xf32>
    affine.for %arg1 = 0 to 1 {
      affine.for %arg2 = 0 to 8 {
        affine.for %arg3 = 0 to 28 {
          affine.for %arg4 = 0 to 28 {
            %20 = affine.load %2[%arg1, %arg2, %arg3, %arg4] : memref<1x8x28x28xf32>
            %21 = arith.cmpf oge, %20, %cst_0 : f32
            %22 = arith.select %21, %20, %cst_0 : f32
            affine.store %22, %4[%arg1, %arg2, %arg3, %arg4] : memref<1x8x28x28xf32>
          }
        }
      }
    }
    %5 = memref.alloc() {alignment = 16 : i64} : memref<1x8x14x14xf32>
    %6 = memref.alloc() : memref<f32>
    affine.for %arg1 = 0 to 1 {
      affine.for %arg2 = 0 to 8 {
        affine.for %arg3 = 0 to 14 {
          affine.for %arg4 = 0 to 14 {
            affine.store %cst, %6[] : memref<f32>
            %20 = affine.max #map7(%arg3)
            %21 = affine.max #map7(%arg4)
            affine.for %arg5 = 0 to min #map8(%arg3)[%c28, %c2, %c0, %c2, %c1] {
              affine.for %arg6 = 0 to min #map8(%arg4)[%c28, %c2, %c0, %c2, %c1] {
                %23 = arith.addi %arg5, %20 : index
                %24 = arith.addi %arg6, %21 : index
                %25 = memref.load %4[%arg1, %arg2, %23, %24] : memref<1x8x28x28xf32>
                %26 = affine.load %6[] : memref<f32>
                %27 = arith.cmpf ogt, %26, %25 : f32
                %28 = arith.select %27, %26, %25 : f32
                affine.store %28, %6[] : memref<f32>
              }
            }
            %22 = affine.load %6[] : memref<f32>
            affine.store %22, %5[%arg1, %arg2, %arg3, %arg4] : memref<1x8x14x14xf32>
          }
        }
      }
    }\n""")


f.write("    %7 = memref.alloc() : memref<16x8x5x5xf32>\n")
conv87 = [w for w in weights if w.name == 'Parameter87'][0]
conv87_weights = onnx.numpy_helper.to_array(conv87)

for a in range(16):
    for b in range(8):
        for c in range(5):
            for d in range(5):
                f.write(f"    %conv87_{a}{b}{c}{d}_a = arith.constant {a} : index\n")
                f.write(f"    %conv87_{a}{b}{c}{d}_b = arith.constant {b} : index\n")
                f.write(f"    %conv87_{a}{b}{c}{d}_c = arith.constant {c} : index\n")
                f.write(f"    %conv87_{a}{b}{c}{d}_d = arith.constant {d} : index\n")
                f.write(f"    %conv87_{a}{b}{c}{d}_v = arith.constant {conv87_weights[a, b, c,d]} : f32\n")
                f.write(f"    memref.store %conv87_{a}{b}{c}{d}_v, %7[%conv87_{a}{b}{c}{d}_a, %conv87_{a}{b}{c}{d}_b, %conv87_{a}{b}{c}{d}_c, %conv87_{a}{b}{c}{d}_d] : memref<16x8x5x5xf32> \n")


f.write("    %8 = memref.alloc() : memref<16xf32>\n")
p88 = [w for w in weights if w.name == 'Parameter88'][0]
p88_weights = onnx.numpy_helper.to_array(p88).flatten()
for a in range(16):
    f.write(f"    %p88_{a} = arith.constant {a} : index\n")
    f.write(f"    %p88_{a}_v = arith.constant {p88_weights[a]} : f32\n")
    f.write(f"    memref.store %p88_{a}_v, %8[%p88_{a}] : memref<16xf32> \n")

f.write("""    %9 = memref.alloc() {alignment = 16 : i64} : memref<1x16x14x14xf32>
    %10 = memref.alloc() : memref<f32>
    affine.for %arg1 = 0 to 1 {
      affine.for %arg2 = 0 to 1 {
        affine.for %arg3 = 0 to 16 {
          %20 = affine.apply #map9(%arg2, %arg3)
          affine.for %arg4 = 0 to 14 {
            affine.for %arg5 = 0 to 14 {
              affine.store %cst_0, %10[] : memref<f32>
              affine.for %arg6 = 0 to 8 {
                affine.for %arg7 = max #map1(%arg4) to min #map10(%arg4) {
                  affine.for %arg8 = max #map3(%arg4, %arg5) to min #map11(%arg4, %arg5) {
                    %24 = affine.apply #map12(%arg6, %arg2)
                    %25 = affine.apply #map6(%arg7, %arg4)
                    %26 = affine.apply #map6(%arg8, %arg5)
                    %27 = affine.load %5[%arg1, %24, %25, %26] : memref<1x8x14x14xf32>
                    %28 = affine.load %7[%20, %arg6, %arg7, %arg8] : memref<16x8x5x5xf32>
                    %29 = affine.load %10[] : memref<f32>
                    %30 = arith.mulf %27, %28 : f32
                    %31 = arith.addf %29, %30 : f32
                    affine.store %31, %10[] : memref<f32>
                  }
                }
              }
              %21 = affine.load %10[] : memref<f32>
              %22 = affine.load %8[%20] : memref<16xf32>
              %23 = arith.addf %21, %22 : f32
              affine.store %23, %9[%arg1, %20, %arg4, %arg5] : memref<1x16x14x14xf32>
            }
          }
        }
      }
    }
    %11 = memref.alloc() {alignment = 16 : i64} : memref<1x16x14x14xf32>
    affine.for %arg1 = 0 to 1 {
      affine.for %arg2 = 0 to 16 {
        affine.for %arg3 = 0 to 14 {
          affine.for %arg4 = 0 to 14 {
            %20 = affine.load %9[%arg1, %arg2, %arg3, %arg4] : memref<1x16x14x14xf32>
            %21 = arith.cmpf oge, %20, %cst_0 : f32
            %22 = arith.select %21, %20, %cst_0 : f32
            affine.store %22, %11[%arg1, %arg2, %arg3, %arg4] : memref<1x16x14x14xf32>
          }
        }
      }
    }
    %12 = memref.alloc() {alignment = 16 : i64} : memref<1x16x4x4xf32>
    %13 = memref.alloc() : memref<f32>
    affine.for %arg1 = 0 to 1 {
      affine.for %arg2 = 0 to 16 {
        affine.for %arg3 = 0 to 4 {
          affine.for %arg4 = 0 to 4 {
            affine.store %cst, %13[] : memref<f32>
            %20 = affine.max #map13(%arg3)
            %21 = affine.max #map13(%arg4)
            affine.for %arg5 = 0 to min #map8(%arg3)[%c14, %c3, %c0, %c3, %c1] {
              affine.for %arg6 = 0 to min #map8(%arg4)[%c14, %c3, %c0, %c3, %c1] {
                %23 = arith.addi %arg5, %20 : index
                %24 = arith.addi %arg6, %21 : index
                %25 = memref.load %11[%arg1, %arg2, %23, %24] : memref<1x16x14x14xf32>
                %26 = affine.load %13[] : memref<f32>
                %27 = arith.cmpf ogt, %26, %25 : f32
                %28 = arith.select %27, %26, %25 : f32
                affine.store %28, %13[] : memref<f32>
              }
            }
            %22 = affine.load %13[] : memref<f32>
            affine.store %22, %12[%arg1, %arg2, %arg3, %arg4] : memref<1x16x4x4xf32>
          }
        }
      }
    }
    %14 = memref.reinterpret_cast %12 to offset: [0], sizes: [1, 256], strides: [256, 1] : memref<1x16x4x4xf32> to memref<1x256xf32>\n"""
)

f.write("    %15 = memref.alloc() : memref<16x4x4x10xf32>\n")
p193 = [w for w in weights if w.name == 'Parameter193'][0]
p193_weights = onnx.numpy_helper.to_array(p193)

for a in range(16):
    for b in range(4):
        for c in range(4):
            for d in range(10):
                f.write(f"    %p193_{a}{b}{c}{d}_a = arith.constant {a} : index\n")
                f.write(f"    %p193_{a}{b}{c}{d}_b = arith.constant {b} : index\n")
                f.write(f"    %p193_{a}{b}{c}{d}_c = arith.constant {c} : index\n")
                f.write(f"    %p193_{a}{b}{c}{d}_d = arith.constant {d} : index\n")
                f.write(f"    %p193_{a}{b}{c}{d}_v = arith.constant {p193_weights[a, b, c,d]} : f32\n")

                f.write(f"    memref.store %p193_{a}{b}{c}{d}_v, %15[%p193_{a}{b}{c}{d}_a, %p193_{a}{b}{c}{d}_b, %p193_{a}{b}{c}{d}_c, %p193_{a}{b}{c}{d}_d] : memref<16x4x4x10xf32> \n")


f.write("    %16 = memref.reinterpret_cast %15 to offset: [0], sizes: [256, 10], strides: [10, 1] : memref<16x4x4x10xf32> to memref<256x10xf32>")
f.write("    %17 = memref.alloc() : memref<1x10xf32>\n")
p194 = [w for w in weights if w.name == 'Parameter194'][0]
p194_weights = onnx.numpy_helper.to_array(p194)
for a in range(1):
    for b in range(10):
        f.write(f"    %p194_{a}_{b}_a = arith.constant {a} : index\n")
        f.write(f"    %p194_{a}_{b}_b = arith.constant {b} : index\n")
        f.write(f"    %p194_{a}_{b}_v = arith.constant {p194_weights[a, b]} : f32\n")
        f.write(f"    memref.store %p194_{a}_{b}_v, %17[%p194_{a}_{b}_a,  %p194_{a}_{b}_b] : memref<1x10xf32> \n")

f.write("""    %18 = memref.alloc() {alignment = 128 : i64} : memref<1x10xf32>
    %19 = memref.alloc() : memref<f32>
    affine.for %arg1 = 0 to 1 {
      affine.for %arg2 = 0 to 10 {
        affine.store %cst_0, %19[] : memref<f32>
        affine.for %arg3 = 0 to 256 {
          %23 = affine.load %14[%arg1, %arg3] : memref<1x256xf32>
          %24 = affine.load %16[%arg3, %arg2] : memref<256x10xf32>
          %25 = arith.mulf %23, %24 : f32
          %26 = affine.load %19[] : memref<f32>
          %27 = arith.addf %25, %26 : f32
          affine.store %27, %19[] : memref<f32>
        }
        %20 = affine.load %19[] : memref<f32>
        %21 = affine.load %17[%c0, %arg2] : memref<1x10xf32>
        %22 = arith.addf %20, %21 : f32
        affine.store %22, %18[%arg1, %arg2] : memref<1x10xf32>
      }
    }\n"""
)

f.write("""    %C2_ = memref.cast %18 : memref<1x10xf32> to memref<*xf32>
    call @printMemrefF32(%C2_) : (memref<*xf32>) -> ()
""")
f.write("    return\n")
f.write("}")
f.close()